from numpy import *

def LoadDataSet():
    return [ [1,3,4],[2,3,5],[1,2,3,5],[2,5]]

def createC1(dataSet):
    C1=[]
    for transaction in dataSet:
        for item in transaction:
            if not [item] in C1:
                C1.append([item])
    C1.sort()
    return map(frozenset,C1)

def ScanD(D,Ck,minSupport):
    ssCnt={}
    for tid in D:
        for can in Ck:
            if can.issubset(tid):
                if not ssCnt.has_key(can):ssCnt[can]=1
                else: ssCnt[can]+=1
    numItems = float(len(D))
    retList = []
    supportData = {}
    for key in ssCnt:
        support = ssCnt[key]/numItems
        if support >=minSupport:
            retList.append(key)
            supportData[key]=support
    return retList,supportData

def aprioriGen(Lk,k):#create Ck
    retList=[]
    m= len(Lk)
    for i in range(m):
        for j in range(i+1,m):
            L1 =list(Lk[i])[:k-2];L2=list(Lk[j])[:k-2]
            L1.sort();L2.sort()
            if L1==L2:
                retList.append(Lk[i]|Lk[j])
    return retList

def apriori(dataSet,minsupport=0.5):
    C1=createC1(dataSet)
    L1,suppportData=ScanD(dataSet,C1,minsupport)
    L=[L1]
    k=2
    ifcontinue=True
    while(ifcontinue):
        Lk=aprioriGen(L[k-2],k)
        Lk,support_=ScanD(DataSet,Lk,minsupport)
        if(len(Lk)==0):
            ifcontinue=False
            break
        suppportData.update(support_)
        L.append(Lk)
        k+=1
    return L,suppportData

DataSet =LoadDataSet()
retList, suppportData = apriori(DataSet,0.7)
print retList